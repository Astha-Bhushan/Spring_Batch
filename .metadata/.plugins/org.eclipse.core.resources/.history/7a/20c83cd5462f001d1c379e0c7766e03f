package com.example.demo.config;

import java.io.File;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.FlatFileParseException;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;

import com.example.demo.model.StudentCsv;

@Configuration
public class SampleJob {

	@Autowired
	private JobBuilderFactory jobBuilderFactory;

	@Autowired
	private StepBuilderFactory stepBuilderFactory;

	@Autowired
	private ItemReader itemReader;

	@Autowired
	private ItemProcessor itemProcessor;

	@Autowired
	private ItemWriter itemWriter;

	@Bean
	public Job secondJob() {

		return jobBuilderFactory.get("Second Job").incrementer(new RunIdIncrementer()).start(firstChunkStep()).build();

	}

	private Step firstChunkStep() {
		return stepBuilderFactory.get("First Chunk Step").<StudentCsv, StudentCsv>chunk(3)
				.reader(flatFileItemReader(null))
				// .processor(itemProcessor)
				.writer(itemWriter)
				.faultTolerant()
				.skip(FlatFileParseException.class) 
				.skip(NullPointerException.class)
				.skip(Throwable.class)  // it catches all the exceptions
			//	.skipLimit(1)
				.skipLimit(Integer.MAX_VALUE)                  // when no of bad records are unknown
		    //  .skipPolicy(new AlwaysSkipItemSkipPolicy() )   // when no of bad records are unknown
				.build();
		
		
	}

	@StepScope
	@Bean
	public FlatFileItemReader<StudentCsv> flatFileItemReader(
			@Value("#{jobParameters['inputFile']}") FileSystemResource resource) {
		FlatFileItemReader<StudentCsv> fileReader = new FlatFileItemReader<StudentCsv>();

		fileReader.setResource(resource);

		fileReader.setLineMapper(new DefaultLineMapper<StudentCsv>() {
			{
				setLineTokenizer(new DelimitedLineTokenizer("|") {
					{
						setNames("ID", "First", "Last", "Age");
					}
				});

				setFieldSetMapper(new BeanWrapperFieldSetMapper<StudentCsv>() {
					{
						setTargetType(StudentCsv.class);
					}

				});

			}

		});

		fileReader.setLinesToSkip(1);
		return fileReader;

	}
}

/*
 * DefaultLineMapper<StudentCsv> defaultLineMapper = new
 * DefaultLineMapper<StudentCsv>();
 * 
 * DelimitedLineTokenizer delimitedLineTokenizer = new DelimitedLineTokenizer();
 * delimitedLineTokenizer.setNames("ID", "First Name", "Last Name", "Email");
 * 
 * defaultLineMapper.setLineTokenizer(delimitedLineTokenizer);
 * 
 * BeanWrapperFieldSetMapper<StudentCsv> fieldSetMapper = new
 * BeanWrapperFieldSetMapper<StudentCsv>();
 * fieldSetMapper.setTargetType(StudentCsv.class);
 * 
 * defaultLineMapper.setFieldSetMapper(fieldSetMapper);
 * 
 * flatFileItemReader.setLineMapper(defaultLineMapper);
 */
